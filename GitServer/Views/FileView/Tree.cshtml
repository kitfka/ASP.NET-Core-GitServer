@using GitServer.Extensions
@using GitServer.Models
@using Westwind.AspNetCore.Markdown;
@using LibGit2Sharp
@model TreeModel
@{
    ViewBag.Title = Model.Name;

    string currRepo = (string)ViewContext.RouteData.Values["repoName"];
    string currUser = (string)ViewContext.RouteData.Values["userName"];
    string currId = (string)ViewContext.RouteData.Values["id"];
    var request = ViewContext.HttpContext.Request;
    var giturl = $"{request.Scheme}://{request.Host}/{currUser}/{currRepo}.git";
    var repo = Model.Repository;
    var lastcommit = repo.Commits.FirstOrDefault();
    bool hasReadMe = GitServer.Helpers.AnotherHelper.ContainsReadMe(repo);
    string readmeText = GitServer.Helpers.AnotherHelper.GetReadMe(repo);

    if (Model.Path != "/")
    {
        readmeText = "#### To Be Implemented!";
    }
}


<div class="w3-card-0 w3-border">
    <header class="w3-container w3-theme w3-padding">
        <h4 class="">@currUser / @currRepo</h4>
    </header>
    <div class="w3-row">
        <div class="w3-col w3-right" style="width:75px">
            <button class="w3-col w3-button" onclick="copyLink();" style="width:75px"> Copy </button>
        </div>
        <div class="w3-rest">
            <input type="text" class="w3-input w3-border w3-rest" value="@giturl" id="inputGitUrl" readonly>
        </div>
    </div>
</div>
<br />
@*Tabs!*@
<div class="w3-row">
    <a href="javascript:void(0)" onclick="openTab(event, 'Code');">
        <div class="w3-third tablink w3-bottombar w3-hover-light-grey w3-padding w3-border-red">Code</div>
    </a>
    <a href="javascript:void(0)" onclick="openTab(event, 'Issues');">
        <div class="w3-third tablink w3-bottombar w3-hover-light-grey w3-padding">Issues</div>
    </a>
    <a href="javascript:void(0)" onclick="openTab(event, 'Pull');">
        <div class="w3-third tablink w3-bottombar w3-hover-light-grey w3-padding">Pull Requests</div>
    </a>
</div>


<div id="Code" class="tab">

    <br />
    <table class="w3-table-all">
        <tr>
            <th>@lastcommit.Author.Name: @lastcommit.Message</th>
            <th></th>
            <th class="w3-right-align">Branches: @repo.Branches.Count() Commits: @repo.Commits.Count() Releases: N/A</th>
        </tr>
        
        @if (Model.Parent != null)
        {
            <tr>
                <td class="collapsing"><i class="folder icon"></i><a href="@Url.UnencodedRouteLink("GetTreeView", new { repoName = currRepo, id = currId, path = Model.Parent })">..</a></td>
                <td></td>
                <td class="w3-right-align"></td>
            </tr>
        }
        @*Yesss, this is bad, but also easy!*@
        @foreach (FileViewModel fvm in Model.Children)
        {
            @if (fvm.Type == ObjectType.Tree)
            {
                
            <tr>
                <td class=""><a href="@Url.UnencodedRouteLink("GetTreeView", new { repoName = currRepo, id = currId, path = fvm.Path })">@fvm.Name@("/")</a></td>
                <td>@GitServer.Helpers.AnotherHelper.GetMessage(repo, fvm)</td>
                <td class="w3-right-align">@GitServer.Helpers.AnotherHelper.GetTimeStamp(repo, fvm)</td>
            </tr>
            }
        }
        @foreach (FileViewModel fvm in Model.Children)
        {
            @if (fvm.Type != ObjectType.Tree)
            {
                bool isTree = false;
                <tr>
                    <td class=""><i class="@((isTree) ? "folder" : "file outline") icon"></i><a href="@Url.UnencodedRouteLink((isTree) ? "GetTreeView" : "GetBlobView", new { repoName = currRepo, id = currId, path = fvm.Path })">@fvm.Name@((isTree) ? "/" : "")</a></td>
                    <td>@GitServer.Helpers.AnotherHelper.GetMessage(repo, fvm)</td>
                    <td class="w3-right-align">@GitServer.Helpers.AnotherHelper.GetTimeStamp(repo, fvm)</td>
                </tr>
            }
        }
    </table>

    <br />
    @if (hasReadMe)
    {

        <div class="w3-card-0 w3-border">
            <header class="w3-container w3-theme w3-padding">
                <h4 class="">README.md</h4>
            </header>
            <div class="w3-container">@Markdown.ParseHtmlString(readmeText)</div>
        </div>

    } 
    else
    {
        <div class="w3-card-0 w3-border">
            <header class="w3-container w3-theme w3-padding">
                <h4 class="">readme</h4>
            </header>
            <div class="w3-container w3-padding">Add a readme.md file!</div>
        </div>
    }
    <br />
    <br />
    <br />

</div>
       
@*bool isTree = fvm.Type == ObjectType.Tree;
<tr>
    <td class=""><i class="@((isTree) ? "folder" : "file outline") icon"></i><a href="@Url.UnencodedRouteLink((isTree) ? "GetTreeView" : "GetBlobView", new { repoName = currRepo, id = currId, path = fvm.Path })">@fvm.Name@((isTree) ? "/" : "")</a></td>
    <td>@GitServer.Helpers.AnotherHelper.GetMessage(repo, fvm)</td>
    <td class="w3-right-align">@GitServer.Helpers.AnotherHelper.GetTimeStamp(repo, fvm)</td>
</tr>*@

<div id="Issues" class="w3-container tab" style="display:none">
    <h2>Issues</h2>
    <p>Placeholder!</p>
</div>


<div id="Pull" class="w3-container tab" style="display:none">
    <h2>Pull</h2>
    <p>Placeholder pull!</p>
</div>




@section Scripts {
    <script>
        function openTab(evt, tapName) {
            var i, x, tablinks;
            x = document.getElementsByClassName("tab");
            for (i = 0; i < x.length; i++) {
                x[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablink");
            for (i = 0; i < x.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" w3-border-red", "");
            }
            document.getElementById(tapName).style.display = "block";
            evt.currentTarget.firstElementChild.className += " w3-border-red";
        }

        function copyLink() {
            const copyText = document.getElementById("inputGitUrl");
            copyText.select();
            document.execCommand("copy");
        }
    </script>
}