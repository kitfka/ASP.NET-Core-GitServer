@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@using Westwind.AspNetCore.Markdown;
@using GitServer.Extensions;
@using GitServer.Models;
@inject IWebHostEnvironment HostingEnvironment;
@inject GitServer.Helpers.IHighlightJsMapper HighlightJsMapper;

@model BlobModel

@{
    ViewBag.Title = Model.Name;
    string currRepo = (string)ViewContext.RouteData.Values["repoName"];
    string currUser = (string)ViewContext.RouteData.Values["userName"];
    string currId = (string)ViewContext.RouteData.Values["id"];
    var request = ViewContext.HttpContext.Request;
    string rawPath = $"{request.Scheme}://{request.Host}/{currUser}/{currRepo}/raw/{currId}/{Model.Path}";
    string backPath = $"{request.Scheme}://{request.Host}/{currUser}/{currRepo}/tree/{currId}/{System.IO.Path.GetDirectoryName(Model.Path)}";
}
<link rel="stylesheet" href="~/lib/highlightjs/styles/foundation.css">

@{
    var ext = System.IO.Path.GetExtension(Model.Path).ToLower();
    var blockClass = HighlightJsMapper.Map(ext)?.HljsClass;
}
<div class="w3-card w3-theme w3-padding">
    File: <strong>@Model.Path</strong>
    <a class="w3-btn w3-theme-action" href="@rawPath">Raw</a>
    <a class="w3-btn w3-theme-action" href="@backPath">back</a>
</div>
@{
    if (Model.IsBinary)
    {
        <p>This file is binary and cannot be displayed.</p>
    }
    else
    {
        if (ext == ".md")
        {
            <div>@Markdown.ParseHtmlString(Model.Content)</div>
        }
        else
        {
            <pre><code class='@blockClass'>@Model.Content</code></pre>
            //Html.HighlightCode(Model.Content, Highlighter.FromExtension(System.IO.Path.GetExtension(Model.Name)), "code")
        }
    }
}
@section Scripts {
    <script src="~/lib/highlightjs/highlight.pack.js"></script>
    <script src="~/lib/highlightjs-line-numbers/dist/highlightjs-line-numbers.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script>
        $(document).ready(function () {
            $('pre code').each(function (i, block) {
                hljs.lineNumbersBlock(block);
                // hljs.highlightBlock(block);
            });
        });
    </script>
}